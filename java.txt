no destrucot in java it do automatcally

if constructor me value pass krte he to constructor me object overwrite ho jata he if defualt declare kiya ho  to

but if we call directlty object(variable) then default value ayegi see above code
{
    class parent
{  
    String name = "Ritik Yadav";
    parent(String name)
    {   
        // n = name;
        System.out.println(name);
    }
}
public class constructor {
   public static void main(String[] args) {
     parent p1 = new parent("Universe");
     System.out.println(p1.name);
   }
    
}

}

{
     String name = "Ritik Yadav";
    parent(String name)
    {                                this kewyword change the default value of objcet
        // n = name;
        this.name=name;
        System.out.println(name);
    }
}


this keyword used to diffrentita between local and instance variable 
this keyword alwasy points to instance varibale 
JVM gets confused 

constructor chaining means multiple constructor ek sath bna do and ek ko call kro
this keywordki help se kisi bhi constructor ko call kr sakte he 


this keyword neve used after super  prevois may used
super keyword is alawys used hen there is a relation of child and parent
also super keyword refers to parent class of tat child class

also wwork in only case of inheritence

methods oveeriding ke case me method ka name same hota he 
class Parents
{
     void eat()
     {
        System.out.println("Magic");
     }
}
class child extends Parents
{
     void eat()
     {
        System.out.println("Jaduuu");
     }
}
public class methodOverriding
{
     public static void main(String[] args)
     {
        Parents p1 = new child();
        p1.eat();
     }
}



abstract class   // ek se jyada abstract class use nhi kr sakt but inteface ek se jyada use kr sakte 
{
    An abstract class in Java is a class that is 
    declared with the abstract keyword. It cannot 
    be instantiated directly, meaning you cannot 
    create objects of an abstract class.
     Abstract classes are designed to be extended
    by other classes and can include both abstract 
   methods (methods without a body) and concrete methods 
   (methods with a body).

   abstract class Animal {
    // Abstract method (no body)
    abstract void sound();

    // Concrete method (with body)
    void eat() {
        System.out.println("This animal eats food.");
    }
}

class Dog extends Animal {
    // Implementing the abstract method
    void sound() {
        System.out.println("The dog barks.");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal myDog = new Dog(); // Polymorphism
        myDog.sound(); // Output: The dog barks.
        myDog.eat();   // Output: This animal eats food.
    }
}
}

interface and abstract class sort if same but un intrface when defining function we should
use publuc keyword to it and also we cannot modify the value of the object 
    {
        interface Bicycle // multiple inheritence
{   
    int a = 99;
    void Break(int decr);
    void speed(int incr);
}
class avaonCycle implements Bicycle{
    void horn()
    {
        System.out.println("Pee pee pop pop ");
    }

    public void Break(int decr)
    {
        System.out.println("Applying Break");
    }
    
    public void speed(int incr)
    {
        System.out.println("Apply speed");
    }

}
public class interface_{
    public static void main(String[] args) {
        avaonCycle a1 = new avaonCycle();
        a1.Break(1);
        a1.speed(2);
        System.out.println(a1.a);

    }
}

    }

    cannot assign a value to static final variable a
         a1.a = 67;